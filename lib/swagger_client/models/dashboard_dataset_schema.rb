=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class DashboardDatasetSchema
    attr_accessor :cache_timeout

    attr_accessor :column_formats

    attr_accessor :column_types

    attr_accessor :columns

    attr_accessor :database

    attr_accessor :datasource_name

    attr_accessor :default_endpoint

    attr_accessor :edit_url

    attr_accessor :fetch_values_predicate

    attr_accessor :filter_select

    attr_accessor :filter_select_enabled

    attr_accessor :granularity_sqla

    attr_accessor :health_check_message

    attr_accessor :id

    attr_accessor :is_sqllab_view

    attr_accessor :main_dttm_col

    attr_accessor :metrics

    attr_accessor :name

    attr_accessor :offset

    attr_accessor :order_by_choices

    attr_accessor :owners

    attr_accessor :params

    attr_accessor :perm

    attr_accessor :schema

    attr_accessor :select_star

    attr_accessor :sql

    attr_accessor :table_name

    attr_accessor :template_params

    attr_accessor :time_grain_sqla

    attr_accessor :type

    attr_accessor :uid

    attr_accessor :verbose_map

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cache_timeout' => :'cache_timeout',
        :'column_formats' => :'column_formats',
        :'column_types' => :'column_types',
        :'columns' => :'columns',
        :'database' => :'database',
        :'datasource_name' => :'datasource_name',
        :'default_endpoint' => :'default_endpoint',
        :'edit_url' => :'edit_url',
        :'fetch_values_predicate' => :'fetch_values_predicate',
        :'filter_select' => :'filter_select',
        :'filter_select_enabled' => :'filter_select_enabled',
        :'granularity_sqla' => :'granularity_sqla',
        :'health_check_message' => :'health_check_message',
        :'id' => :'id',
        :'is_sqllab_view' => :'is_sqllab_view',
        :'main_dttm_col' => :'main_dttm_col',
        :'metrics' => :'metrics',
        :'name' => :'name',
        :'offset' => :'offset',
        :'order_by_choices' => :'order_by_choices',
        :'owners' => :'owners',
        :'params' => :'params',
        :'perm' => :'perm',
        :'schema' => :'schema',
        :'select_star' => :'select_star',
        :'sql' => :'sql',
        :'table_name' => :'table_name',
        :'template_params' => :'template_params',
        :'time_grain_sqla' => :'time_grain_sqla',
        :'type' => :'type',
        :'uid' => :'uid',
        :'verbose_map' => :'verbose_map'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cache_timeout' => :'Object',
        :'column_formats' => :'Object',
        :'column_types' => :'Object',
        :'columns' => :'Object',
        :'database' => :'Object',
        :'datasource_name' => :'Object',
        :'default_endpoint' => :'Object',
        :'edit_url' => :'Object',
        :'fetch_values_predicate' => :'Object',
        :'filter_select' => :'Object',
        :'filter_select_enabled' => :'Object',
        :'granularity_sqla' => :'Object',
        :'health_check_message' => :'Object',
        :'id' => :'Object',
        :'is_sqllab_view' => :'Object',
        :'main_dttm_col' => :'Object',
        :'metrics' => :'Object',
        :'name' => :'Object',
        :'offset' => :'Object',
        :'order_by_choices' => :'Object',
        :'owners' => :'Object',
        :'params' => :'Object',
        :'perm' => :'Object',
        :'schema' => :'Object',
        :'select_star' => :'Object',
        :'sql' => :'Object',
        :'table_name' => :'Object',
        :'template_params' => :'Object',
        :'time_grain_sqla' => :'Object',
        :'type' => :'Object',
        :'uid' => :'Object',
        :'verbose_map' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::DashboardDatasetSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::DashboardDatasetSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cache_timeout')
        self.cache_timeout = attributes[:'cache_timeout']
      end

      if attributes.key?(:'column_formats')
        self.column_formats = attributes[:'column_formats']
      end

      if attributes.key?(:'column_types')
        if (value = attributes[:'column_types']).is_a?(Array)
          self.column_types = value
        end
      end

      if attributes.key?(:'columns')
        if (value = attributes[:'columns']).is_a?(Array)
          self.columns = value
        end
      end

      if attributes.key?(:'database')
        self.database = attributes[:'database']
      end

      if attributes.key?(:'datasource_name')
        self.datasource_name = attributes[:'datasource_name']
      end

      if attributes.key?(:'default_endpoint')
        self.default_endpoint = attributes[:'default_endpoint']
      end

      if attributes.key?(:'edit_url')
        self.edit_url = attributes[:'edit_url']
      end

      if attributes.key?(:'fetch_values_predicate')
        self.fetch_values_predicate = attributes[:'fetch_values_predicate']
      end

      if attributes.key?(:'filter_select')
        self.filter_select = attributes[:'filter_select']
      end

      if attributes.key?(:'filter_select_enabled')
        self.filter_select_enabled = attributes[:'filter_select_enabled']
      end

      if attributes.key?(:'granularity_sqla')
        if (value = attributes[:'granularity_sqla']).is_a?(Array)
          self.granularity_sqla = value
        end
      end

      if attributes.key?(:'health_check_message')
        self.health_check_message = attributes[:'health_check_message']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_sqllab_view')
        self.is_sqllab_view = attributes[:'is_sqllab_view']
      end

      if attributes.key?(:'main_dttm_col')
        self.main_dttm_col = attributes[:'main_dttm_col']
      end

      if attributes.key?(:'metrics')
        if (value = attributes[:'metrics']).is_a?(Array)
          self.metrics = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'order_by_choices')
        if (value = attributes[:'order_by_choices']).is_a?(Array)
          self.order_by_choices = value
        end
      end

      if attributes.key?(:'owners')
        if (value = attributes[:'owners']).is_a?(Array)
          self.owners = value
        end
      end

      if attributes.key?(:'params')
        self.params = attributes[:'params']
      end

      if attributes.key?(:'perm')
        self.perm = attributes[:'perm']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'select_star')
        self.select_star = attributes[:'select_star']
      end

      if attributes.key?(:'sql')
        self.sql = attributes[:'sql']
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end

      if attributes.key?(:'template_params')
        self.template_params = attributes[:'template_params']
      end

      if attributes.key?(:'time_grain_sqla')
        if (value = attributes[:'time_grain_sqla']).is_a?(Array)
          self.time_grain_sqla = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'verbose_map')
        if (value = attributes[:'verbose_map']).is_a?(Hash)
          self.verbose_map = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cache_timeout == o.cache_timeout &&
          column_formats == o.column_formats &&
          column_types == o.column_types &&
          columns == o.columns &&
          database == o.database &&
          datasource_name == o.datasource_name &&
          default_endpoint == o.default_endpoint &&
          edit_url == o.edit_url &&
          fetch_values_predicate == o.fetch_values_predicate &&
          filter_select == o.filter_select &&
          filter_select_enabled == o.filter_select_enabled &&
          granularity_sqla == o.granularity_sqla &&
          health_check_message == o.health_check_message &&
          id == o.id &&
          is_sqllab_view == o.is_sqllab_view &&
          main_dttm_col == o.main_dttm_col &&
          metrics == o.metrics &&
          name == o.name &&
          offset == o.offset &&
          order_by_choices == o.order_by_choices &&
          owners == o.owners &&
          params == o.params &&
          perm == o.perm &&
          schema == o.schema &&
          select_star == o.select_star &&
          sql == o.sql &&
          table_name == o.table_name &&
          template_params == o.template_params &&
          time_grain_sqla == o.time_grain_sqla &&
          type == o.type &&
          uid == o.uid &&
          verbose_map == o.verbose_map
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cache_timeout, column_formats, column_types, columns, database, datasource_name, default_endpoint, edit_url, fetch_values_predicate, filter_select, filter_select_enabled, granularity_sqla, health_check_message, id, is_sqllab_view, main_dttm_col, metrics, name, offset, order_by_choices, owners, params, perm, schema, select_star, sql, table_name, template_params, time_grain_sqla, type, uid, verbose_map].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
