=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class DatabaseRestApiPut
    # Allow CREATE TABLE AS option in SQL Lab
    attr_accessor :allow_ctas

    # Allow CREATE VIEW AS option in SQL Lab
    attr_accessor :allow_cvas

    # Allow users to run non-SELECT statements (UPDATE, DELETE, CREATE, ...) in SQL Lab
    attr_accessor :allow_dml

    # Allow to upload CSV file data into this databaseIf selected, please set the schemas allowed for csv upload in Extra.
    attr_accessor :allow_file_upload

    # Allow SQL Lab to fetch a list of all tables and all views across all database schemas. For large data warehouse with thousands of tables, this can be expensive and put strain on the system.
    attr_accessor :allow_multi_schema_metadata_fetch

    # Operate the database in asynchronous mode, meaning  that the queries are executed on remote workers as opposed to on the web server itself. This assumes that you have a Celery worker setup as well as a results backend. Refer to the installation docs for more information.
    attr_accessor :allow_run_async

    # Duration (in seconds) of the caching timeout for charts of this database. A timeout of 0 indicates that the cache never expires. Note this defaults to the global timeout if undefined.
    attr_accessor :cache_timeout

    # Configuration_method is used on the frontend to inform the backend whether to explode parameters or to provide only a sqlalchemy_uri.
    attr_accessor :configuration_method

    # A database name to identify this connection.
    attr_accessor :database_name

    # <p>JSON string containing additional connection configuration.<br>This is used to provide connection information for systems like Hive, Presto, and BigQuery, which do not conform to the username:password syntax normally used by SQLAlchemy.</p>
    attr_accessor :encrypted_extra

    # SQLAlchemy engine to use
    attr_accessor :engine

    # Expose this database to SQLLab
    attr_accessor :expose_in_sqllab

    attr_accessor :external_url

    # <p>JSON string containing extra configuration elements.<br>1. The <code>engine_params</code> object gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\">sqlalchemy.create_engine</a> call, while the <code>metadata_params</code> gets unpacked into the <a href=\"https://docs.sqlalchemy.org/en/rel_1_0/core/metadata.html#sqlalchemy.schema.MetaData\">sqlalchemy.MetaData</a> call.<br>2. The <code>metadata_cache_timeout</code> is a cache timeout setting in seconds for metadata fetch of this database. Specify it as <strong>\"metadata_cache_timeout\": {\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}</strong>. If unset, cache will not be enabled for the functionality. A timeout of 0 indicates that the cache never expires.<br>3. The <code>schemas_allowed_for_file_upload</code> is a comma separated list of schemas that CSVs are allowed to upload to. Specify it as <strong>\"schemas_allowed_for_file_upload\": [\"public\", \"csv_upload\"]</strong>. If database flavor does not support schema or any schema is allowed to be accessed, just leave the list empty<br>4. The <code>version</code> field is a string specifying the this db's version. This should be used with Presto DBs so that the syntax is correct<br>5. The <code>allows_virtual_table_explore</code> field is a boolean specifying whether or not the Explore button in SQL Lab results is shown.<br>6. The <code>disable_data_preview</code> field is a boolean specifying whether or not data preview queries will be run when fetching table metadata in SQL Lab.</p>
    attr_accessor :extra

    # When allowing CREATE TABLE AS option in SQL Lab, this option forces the table to be created in this schema
    attr_accessor :force_ctas_schema

    # If Presto, all the queries in SQL Lab are going to be executed as the currently logged on user who must have permission to run them.<br/>If Hive and hive.server2.enable.doAs is enabled, will run the queries as service account, but impersonate the currently logged on user via hive.server2.proxy.user property.
    attr_accessor :impersonate_user

    attr_accessor :is_managed_externally

    # DB-specific parameters for configuration
    attr_accessor :parameters

    # <p>Optional CA_BUNDLE contents to validate HTTPS requests. Only available on certain database engines.</p>
    attr_accessor :server_cert

    # <p>Refer to the <a href=\"https://docs.sqlalchemy.org/en/rel_1_2/core/engines.html#database-urls\">SqlAlchemy docs</a> for more information on how to structure your URI.</p>
    attr_accessor :sqlalchemy_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_ctas' => :'allow_ctas',
        :'allow_cvas' => :'allow_cvas',
        :'allow_dml' => :'allow_dml',
        :'allow_file_upload' => :'allow_file_upload',
        :'allow_multi_schema_metadata_fetch' => :'allow_multi_schema_metadata_fetch',
        :'allow_run_async' => :'allow_run_async',
        :'cache_timeout' => :'cache_timeout',
        :'configuration_method' => :'configuration_method',
        :'database_name' => :'database_name',
        :'encrypted_extra' => :'encrypted_extra',
        :'engine' => :'engine',
        :'expose_in_sqllab' => :'expose_in_sqllab',
        :'external_url' => :'external_url',
        :'extra' => :'extra',
        :'force_ctas_schema' => :'force_ctas_schema',
        :'impersonate_user' => :'impersonate_user',
        :'is_managed_externally' => :'is_managed_externally',
        :'parameters' => :'parameters',
        :'server_cert' => :'server_cert',
        :'sqlalchemy_uri' => :'sqlalchemy_uri'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_ctas' => :'Object',
        :'allow_cvas' => :'Object',
        :'allow_dml' => :'Object',
        :'allow_file_upload' => :'Object',
        :'allow_multi_schema_metadata_fetch' => :'Object',
        :'allow_run_async' => :'Object',
        :'cache_timeout' => :'Object',
        :'configuration_method' => :'Object',
        :'database_name' => :'Object',
        :'encrypted_extra' => :'Object',
        :'engine' => :'Object',
        :'expose_in_sqllab' => :'Object',
        :'external_url' => :'Object',
        :'extra' => :'Object',
        :'force_ctas_schema' => :'Object',
        :'impersonate_user' => :'Object',
        :'is_managed_externally' => :'Object',
        :'parameters' => :'Object',
        :'server_cert' => :'Object',
        :'sqlalchemy_uri' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cache_timeout',
        :'database_name',
        :'encrypted_extra',
        :'engine',
        :'external_url',
        :'force_ctas_schema',
        :'is_managed_externally',
        :'server_cert',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::DatabaseRestApiPut` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::DatabaseRestApiPut`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_ctas')
        self.allow_ctas = attributes[:'allow_ctas']
      end

      if attributes.key?(:'allow_cvas')
        self.allow_cvas = attributes[:'allow_cvas']
      end

      if attributes.key?(:'allow_dml')
        self.allow_dml = attributes[:'allow_dml']
      end

      if attributes.key?(:'allow_file_upload')
        self.allow_file_upload = attributes[:'allow_file_upload']
      end

      if attributes.key?(:'allow_multi_schema_metadata_fetch')
        self.allow_multi_schema_metadata_fetch = attributes[:'allow_multi_schema_metadata_fetch']
      end

      if attributes.key?(:'allow_run_async')
        self.allow_run_async = attributes[:'allow_run_async']
      end

      if attributes.key?(:'cache_timeout')
        self.cache_timeout = attributes[:'cache_timeout']
      end

      if attributes.key?(:'configuration_method')
        self.configuration_method = attributes[:'configuration_method']
      end

      if attributes.key?(:'database_name')
        self.database_name = attributes[:'database_name']
      end

      if attributes.key?(:'encrypted_extra')
        self.encrypted_extra = attributes[:'encrypted_extra']
      end

      if attributes.key?(:'engine')
        self.engine = attributes[:'engine']
      end

      if attributes.key?(:'expose_in_sqllab')
        self.expose_in_sqllab = attributes[:'expose_in_sqllab']
      end

      if attributes.key?(:'external_url')
        self.external_url = attributes[:'external_url']
      end

      if attributes.key?(:'extra')
        self.extra = attributes[:'extra']
      end

      if attributes.key?(:'force_ctas_schema')
        self.force_ctas_schema = attributes[:'force_ctas_schema']
      end

      if attributes.key?(:'impersonate_user')
        self.impersonate_user = attributes[:'impersonate_user']
      end

      if attributes.key?(:'is_managed_externally')
        self.is_managed_externally = attributes[:'is_managed_externally']
      end

      if attributes.key?(:'parameters')
        if (value = attributes[:'parameters']).is_a?(Hash)
          self.parameters = value
        end
      end

      if attributes.key?(:'server_cert')
        self.server_cert = attributes[:'server_cert']
      end

      if attributes.key?(:'sqlalchemy_uri')
        self.sqlalchemy_uri = attributes[:'sqlalchemy_uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_ctas == o.allow_ctas &&
          allow_cvas == o.allow_cvas &&
          allow_dml == o.allow_dml &&
          allow_file_upload == o.allow_file_upload &&
          allow_multi_schema_metadata_fetch == o.allow_multi_schema_metadata_fetch &&
          allow_run_async == o.allow_run_async &&
          cache_timeout == o.cache_timeout &&
          configuration_method == o.configuration_method &&
          database_name == o.database_name &&
          encrypted_extra == o.encrypted_extra &&
          engine == o.engine &&
          expose_in_sqllab == o.expose_in_sqllab &&
          external_url == o.external_url &&
          extra == o.extra &&
          force_ctas_schema == o.force_ctas_schema &&
          impersonate_user == o.impersonate_user &&
          is_managed_externally == o.is_managed_externally &&
          parameters == o.parameters &&
          server_cert == o.server_cert &&
          sqlalchemy_uri == o.sqlalchemy_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_ctas, allow_cvas, allow_dml, allow_file_upload, allow_multi_schema_metadata_fetch, allow_run_async, cache_timeout, configuration_method, database_name, encrypted_extra, engine, expose_in_sqllab, external_url, extra, force_ctas_schema, impersonate_user, is_managed_externally, parameters, server_cert, sqlalchemy_uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
