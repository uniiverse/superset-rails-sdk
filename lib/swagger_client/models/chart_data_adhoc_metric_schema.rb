=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class ChartDataAdhocMetricSchema
    # Aggregation operator. Only required for simple expression types.
    attr_accessor :aggregate

    attr_accessor :column

    # Simple or SQL metric
    attr_accessor :expression_type

    # When false, the label will be automatically generated based on the aggregate expression. When true, a custom label has to be specified.
    attr_accessor :has_custom_label

    # Indicates if the filter has been added by a filter component as opposed to being a part of the original query.
    attr_accessor :is_extra

    # Label for the metric. Is automatically generated unless hasCustomLabel is true, in which case label must be defined.
    attr_accessor :label

    # Unique identifier. Can be any string value, as long as all metrics have a unique identifier. If undefined, a random name will be generated.
    attr_accessor :option_name

    # The metric as defined by a SQL aggregate expression. Only required for SQL expression type.
    attr_accessor :sql_expression

    # Optional time grain for temporal filters
    attr_accessor :time_grain

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aggregate' => :'aggregate',
        :'column' => :'column',
        :'expression_type' => :'expressionType',
        :'has_custom_label' => :'hasCustomLabel',
        :'is_extra' => :'isExtra',
        :'label' => :'label',
        :'option_name' => :'optionName',
        :'sql_expression' => :'sqlExpression',
        :'time_grain' => :'timeGrain'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aggregate' => :'Object',
        :'column' => :'Object',
        :'expression_type' => :'Object',
        :'has_custom_label' => :'Object',
        :'is_extra' => :'Object',
        :'label' => :'Object',
        :'option_name' => :'Object',
        :'sql_expression' => :'Object',
        :'time_grain' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ChartDataAdhocMetricSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ChartDataAdhocMetricSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aggregate')
        self.aggregate = attributes[:'aggregate']
      end

      if attributes.key?(:'column')
        self.column = attributes[:'column']
      end

      if attributes.key?(:'expression_type')
        self.expression_type = attributes[:'expression_type']
      end

      if attributes.key?(:'has_custom_label')
        self.has_custom_label = attributes[:'has_custom_label']
      end

      if attributes.key?(:'is_extra')
        self.is_extra = attributes[:'is_extra']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'option_name')
        self.option_name = attributes[:'option_name']
      end

      if attributes.key?(:'sql_expression')
        self.sql_expression = attributes[:'sql_expression']
      end

      if attributes.key?(:'time_grain')
        self.time_grain = attributes[:'time_grain']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @expression_type.nil?
        invalid_properties.push('invalid value for "expression_type", expression_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      aggregate_validator = EnumAttributeValidator.new('Object', ['AVG', 'COUNT', 'COUNT_DISTINCT', 'MAX', 'MIN', 'SUM'])
      return false unless aggregate_validator.valid?(@aggregate)
      return false if @expression_type.nil?
      expression_type_validator = EnumAttributeValidator.new('Object', ['SIMPLE', 'SQL'])
      return false unless expression_type_validator.valid?(@expression_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aggregate Object to be assigned
    def aggregate=(aggregate)
      validator = EnumAttributeValidator.new('Object', ['AVG', 'COUNT', 'COUNT_DISTINCT', 'MAX', 'MIN', 'SUM'])
      unless validator.valid?(aggregate)
        fail ArgumentError, "invalid value for \"aggregate\", must be one of #{validator.allowable_values}."
      end
      @aggregate = aggregate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expression_type Object to be assigned
    def expression_type=(expression_type)
      validator = EnumAttributeValidator.new('Object', ['SIMPLE', 'SQL'])
      unless validator.valid?(expression_type)
        fail ArgumentError, "invalid value for \"expression_type\", must be one of #{validator.allowable_values}."
      end
      @expression_type = expression_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggregate == o.aggregate &&
          column == o.column &&
          expression_type == o.expression_type &&
          has_custom_label == o.has_custom_label &&
          is_extra == o.is_extra &&
          label == o.label &&
          option_name == o.option_name &&
          sql_expression == o.sql_expression &&
          time_grain == o.time_grain
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aggregate, column, expression_type, has_custom_label, is_extra, label, option_name, sql_expression, time_grain].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
