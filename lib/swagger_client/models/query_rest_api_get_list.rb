=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class QueryRestApiGetList
    attr_accessor :changed_on

    attr_accessor :database

    attr_accessor :end_time

    attr_accessor :executed_sql

    attr_accessor :id

    attr_accessor :rows

    attr_accessor :schema

    attr_accessor :sql

    attr_accessor :sql_tables

    attr_accessor :start_time

    attr_accessor :status

    attr_accessor :tab_name

    attr_accessor :tmp_table_name

    attr_accessor :tracking_url

    attr_accessor :user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'changed_on' => :'changed_on',
        :'database' => :'database',
        :'end_time' => :'end_time',
        :'executed_sql' => :'executed_sql',
        :'id' => :'id',
        :'rows' => :'rows',
        :'schema' => :'schema',
        :'sql' => :'sql',
        :'sql_tables' => :'sql_tables',
        :'start_time' => :'start_time',
        :'status' => :'status',
        :'tab_name' => :'tab_name',
        :'tmp_table_name' => :'tmp_table_name',
        :'tracking_url' => :'tracking_url',
        :'user' => :'user'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'changed_on' => :'Object',
        :'database' => :'Object',
        :'end_time' => :'Object',
        :'executed_sql' => :'Object',
        :'id' => :'Object',
        :'rows' => :'Object',
        :'schema' => :'Object',
        :'sql' => :'Object',
        :'sql_tables' => :'Object',
        :'start_time' => :'Object',
        :'status' => :'Object',
        :'tab_name' => :'Object',
        :'tmp_table_name' => :'Object',
        :'tracking_url' => :'Object',
        :'user' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'changed_on',
        :'end_time',
        :'executed_sql',
        :'rows',
        :'schema',
        :'sql',
        :'start_time',
        :'status',
        :'tab_name',
        :'tmp_table_name',
        :'tracking_url',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::QueryRestApiGetList` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::QueryRestApiGetList`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'changed_on')
        self.changed_on = attributes[:'changed_on']
      end

      if attributes.key?(:'database')
        self.database = attributes[:'database']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'executed_sql')
        self.executed_sql = attributes[:'executed_sql']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'rows')
        self.rows = attributes[:'rows']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'sql')
        self.sql = attributes[:'sql']
      end

      if attributes.key?(:'sql_tables')
        self.sql_tables = attributes[:'sql_tables']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tab_name')
        self.tab_name = attributes[:'tab_name']
      end

      if attributes.key?(:'tmp_table_name')
        self.tmp_table_name = attributes[:'tmp_table_name']
      end

      if attributes.key?(:'tracking_url')
        self.tracking_url = attributes[:'tracking_url']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @database.nil?
        invalid_properties.push('invalid value for "database", database cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @database.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          changed_on == o.changed_on &&
          database == o.database &&
          end_time == o.end_time &&
          executed_sql == o.executed_sql &&
          id == o.id &&
          rows == o.rows &&
          schema == o.schema &&
          sql == o.sql &&
          sql_tables == o.sql_tables &&
          start_time == o.start_time &&
          status == o.status &&
          tab_name == o.tab_name &&
          tmp_table_name == o.tmp_table_name &&
          tracking_url == o.tracking_url &&
          user == o.user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [changed_on, database, end_time, executed_sql, id, rows, schema, sql, sql_tables, start_time, status, tab_name, tmp_table_name, tracking_url, user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
