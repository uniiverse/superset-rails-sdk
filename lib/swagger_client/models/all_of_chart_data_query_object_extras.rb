=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  # Extra parameters to add to the query.
  class AllOfChartDataQueryObjectExtras
    # Starting point for time grain counting on legacy Druid datasources. Used to change e.g. Monday/Sunday first-day-of-week.
    attr_accessor :druid_time_origin

    # HAVING clause to be added to aggregate queries using AND operator.
    attr_accessor :having

    # HAVING filters to be added to legacy Druid datasource queries.
    attr_accessor :having_druid

    # End time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`
    attr_accessor :relative_end

    # Start time for relative time deltas. Default: `config[\"DEFAULT_RELATIVE_START_TIME\"]`
    attr_accessor :relative_start

    # To what level of granularity should the temporal column be aggregated. Supports [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) durations.
    attr_accessor :time_grain_sqla

    attr_accessor :time_range_endpoints

    # WHERE clause to be added to queries using AND operator.
    attr_accessor :where

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'druid_time_origin' => :'druid_time_origin',
        :'having' => :'having',
        :'having_druid' => :'having_druid',
        :'relative_end' => :'relative_end',
        :'relative_start' => :'relative_start',
        :'time_grain_sqla' => :'time_grain_sqla',
        :'time_range_endpoints' => :'time_range_endpoints',
        :'where' => :'where'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'druid_time_origin' => :'',
        :'having' => :'',
        :'having_druid' => :'',
        :'relative_end' => :'',
        :'relative_start' => :'',
        :'time_grain_sqla' => :'',
        :'time_range_endpoints' => :'',
        :'where' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'druid_time_origin',
        :'time_grain_sqla',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AllOfChartDataQueryObjectExtras` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AllOfChartDataQueryObjectExtras`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'druid_time_origin')
        self.druid_time_origin = attributes[:'druid_time_origin']
      end

      if attributes.key?(:'having')
        self.having = attributes[:'having']
      end

      if attributes.key?(:'having_druid')
        if (value = attributes[:'having_druid']).is_a?(Array)
          self.having_druid = value
        end
      end

      if attributes.key?(:'relative_end')
        self.relative_end = attributes[:'relative_end']
      end

      if attributes.key?(:'relative_start')
        self.relative_start = attributes[:'relative_start']
      end

      if attributes.key?(:'time_grain_sqla')
        self.time_grain_sqla = attributes[:'time_grain_sqla']
      end

      if attributes.key?(:'time_range_endpoints')
        if (value = attributes[:'time_range_endpoints']).is_a?(Array)
          self.time_range_endpoints = value
        end
      end

      if attributes.key?(:'where')
        self.where = attributes[:'where']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      relative_end_validator = EnumAttributeValidator.new('', ['today', 'now'])
      return false unless relative_end_validator.valid?(@relative_end)
      relative_start_validator = EnumAttributeValidator.new('', ['today', 'now'])
      return false unless relative_start_validator.valid?(@relative_start)
      time_grain_sqla_validator = EnumAttributeValidator.new('', ['PT1S', 'PT5S', 'PT30S', 'PT1M', 'PT5M', 'PT10M', 'PT15M', 'PT30M', 'PT1H', 'PT6H', 'P1D', 'P1W', 'P1M', 'P3M', 'P1Y', '1969-12-28T00:00:00Z/P1W', '1969-12-29T00:00:00Z/P1W', 'P1W/1970-01-03T00:00:00Z', 'P1W/1970-01-04T00:00:00Z'])
      return false unless time_grain_sqla_validator.valid?(@time_grain_sqla)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] relative_end Object to be assigned
    def relative_end=(relative_end)
      validator = EnumAttributeValidator.new('', ['today', 'now'])
      unless validator.valid?(relative_end)
        fail ArgumentError, "invalid value for \"relative_end\", must be one of #{validator.allowable_values}."
      end
      @relative_end = relative_end
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] relative_start Object to be assigned
    def relative_start=(relative_start)
      validator = EnumAttributeValidator.new('', ['today', 'now'])
      unless validator.valid?(relative_start)
        fail ArgumentError, "invalid value for \"relative_start\", must be one of #{validator.allowable_values}."
      end
      @relative_start = relative_start
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_grain_sqla Object to be assigned
    def time_grain_sqla=(time_grain_sqla)
      validator = EnumAttributeValidator.new('', ['PT1S', 'PT5S', 'PT30S', 'PT1M', 'PT5M', 'PT10M', 'PT15M', 'PT30M', 'PT1H', 'PT6H', 'P1D', 'P1W', 'P1M', 'P3M', 'P1Y', '1969-12-28T00:00:00Z/P1W', '1969-12-29T00:00:00Z/P1W', 'P1W/1970-01-03T00:00:00Z', 'P1W/1970-01-04T00:00:00Z'])
      unless validator.valid?(time_grain_sqla)
        fail ArgumentError, "invalid value for \"time_grain_sqla\", must be one of #{validator.allowable_values}."
      end
      @time_grain_sqla = time_grain_sqla
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          druid_time_origin == o.druid_time_origin &&
          having == o.having &&
          having_druid == o.having_druid &&
          relative_end == o.relative_end &&
          relative_start == o.relative_start &&
          time_grain_sqla == o.time_grain_sqla &&
          time_range_endpoints == o.time_range_endpoints &&
          where == o.where && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [druid_time_origin, having, having_druid, relative_end, relative_start, time_grain_sqla, time_range_endpoints, where].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
