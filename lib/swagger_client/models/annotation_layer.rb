=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class AnnotationLayer
    # Type of annotation layer
    attr_accessor :annotation_type

    # Layer color
    attr_accessor :color

    # Columns to use as the description. If none are provided, all will be shown.
    attr_accessor :description_columns

    # Should line be hidden. Only applies to line annotations
    attr_accessor :hide_line

    # Column containing end of interval. Only applies to interval layers
    attr_accessor :interval_end_column

    # Name of layer
    attr_accessor :name

    # Opacity of layer
    attr_accessor :opacity

    # which properties should be overridable
    attr_accessor :overrides

    # Should the layer be shown
    attr_accessor :show

    # Should the label always be shown
    attr_accessor :show_label

    # Should markers be shown. Only applies to line annotations.
    attr_accessor :show_markers

    # Type of source for annotation data
    attr_accessor :source_type

    # Line style. Only applies to time-series annotations
    attr_accessor :style

    # Column with event date or interval start date
    attr_accessor :time_column

    # Column with title
    attr_accessor :title_column

    # For formula annotations, this contains the formula. For other types, this is the primary key of the source object.
    attr_accessor :value

    # Width of annotation line
    attr_accessor :width

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'annotation_type' => :'annotationType',
        :'color' => :'color',
        :'description_columns' => :'descriptionColumns',
        :'hide_line' => :'hideLine',
        :'interval_end_column' => :'intervalEndColumn',
        :'name' => :'name',
        :'opacity' => :'opacity',
        :'overrides' => :'overrides',
        :'show' => :'show',
        :'show_label' => :'showLabel',
        :'show_markers' => :'showMarkers',
        :'source_type' => :'sourceType',
        :'style' => :'style',
        :'time_column' => :'timeColumn',
        :'title_column' => :'titleColumn',
        :'value' => :'value',
        :'width' => :'width'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'annotation_type' => :'Object',
        :'color' => :'Object',
        :'description_columns' => :'Object',
        :'hide_line' => :'Object',
        :'interval_end_column' => :'Object',
        :'name' => :'Object',
        :'opacity' => :'Object',
        :'overrides' => :'Object',
        :'show' => :'Object',
        :'show_label' => :'Object',
        :'show_markers' => :'Object',
        :'source_type' => :'Object',
        :'style' => :'Object',
        :'time_column' => :'Object',
        :'title_column' => :'Object',
        :'value' => :'Object',
        :'width' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'color',
        :'hide_line',
        :'interval_end_column',
        :'opacity',
        :'overrides',
        :'show_label',
        :'time_column',
        :'title_column',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AnnotationLayer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AnnotationLayer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'annotation_type')
        self.annotation_type = attributes[:'annotation_type']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'description_columns')
        if (value = attributes[:'description_columns']).is_a?(Array)
          self.description_columns = value
        end
      end

      if attributes.key?(:'hide_line')
        self.hide_line = attributes[:'hide_line']
      end

      if attributes.key?(:'interval_end_column')
        self.interval_end_column = attributes[:'interval_end_column']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'opacity')
        self.opacity = attributes[:'opacity']
      end

      if attributes.key?(:'overrides')
        if (value = attributes[:'overrides']).is_a?(Hash)
          self.overrides = value
        end
      end

      if attributes.key?(:'show')
        self.show = attributes[:'show']
      end

      if attributes.key?(:'show_label')
        self.show_label = attributes[:'show_label']
      end

      if attributes.key?(:'show_markers')
        self.show_markers = attributes[:'show_markers']
      end

      if attributes.key?(:'source_type')
        self.source_type = attributes[:'source_type']
      end

      if attributes.key?(:'style')
        self.style = attributes[:'style']
      end

      if attributes.key?(:'time_column')
        self.time_column = attributes[:'time_column']
      end

      if attributes.key?(:'title_column')
        self.title_column = attributes[:'title_column']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @show.nil?
        invalid_properties.push('invalid value for "show", show cannot be nil.')
      end

      if @show_markers.nil?
        invalid_properties.push('invalid value for "show_markers", show_markers cannot be nil.')
      end

      if @value.nil?
        invalid_properties.push('invalid value for "value", value cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      annotation_type_validator = EnumAttributeValidator.new('Object', ['FORMULA', 'INTERVAL', 'EVENT', 'TIME_SERIES'])
      return false unless annotation_type_validator.valid?(@annotation_type)
      return false if @name.nil?
      opacity_validator = EnumAttributeValidator.new('Object', ['', 'opacityLow', 'opacityMedium', 'opacityHigh'])
      return false unless opacity_validator.valid?(@opacity)
      return false if @show.nil?
      return false if @show_markers.nil?
      source_type_validator = EnumAttributeValidator.new('Object', ['', 'line', 'NATIVE', 'table'])
      return false unless source_type_validator.valid?(@source_type)
      style_validator = EnumAttributeValidator.new('Object', ['dashed', 'dotted', 'solid', 'longDashed'])
      return false unless style_validator.valid?(@style)
      return false if @value.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] annotation_type Object to be assigned
    def annotation_type=(annotation_type)
      validator = EnumAttributeValidator.new('Object', ['FORMULA', 'INTERVAL', 'EVENT', 'TIME_SERIES'])
      unless validator.valid?(annotation_type)
        fail ArgumentError, "invalid value for \"annotation_type\", must be one of #{validator.allowable_values}."
      end
      @annotation_type = annotation_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] opacity Object to be assigned
    def opacity=(opacity)
      validator = EnumAttributeValidator.new('Object', ['', 'opacityLow', 'opacityMedium', 'opacityHigh'])
      unless validator.valid?(opacity)
        fail ArgumentError, "invalid value for \"opacity\", must be one of #{validator.allowable_values}."
      end
      @opacity = opacity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_type Object to be assigned
    def source_type=(source_type)
      validator = EnumAttributeValidator.new('Object', ['', 'line', 'NATIVE', 'table'])
      unless validator.valid?(source_type)
        fail ArgumentError, "invalid value for \"source_type\", must be one of #{validator.allowable_values}."
      end
      @source_type = source_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] style Object to be assigned
    def style=(style)
      validator = EnumAttributeValidator.new('Object', ['dashed', 'dotted', 'solid', 'longDashed'])
      unless validator.valid?(style)
        fail ArgumentError, "invalid value for \"style\", must be one of #{validator.allowable_values}."
      end
      @style = style
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          annotation_type == o.annotation_type &&
          color == o.color &&
          description_columns == o.description_columns &&
          hide_line == o.hide_line &&
          interval_end_column == o.interval_end_column &&
          name == o.name &&
          opacity == o.opacity &&
          overrides == o.overrides &&
          show == o.show &&
          show_label == o.show_label &&
          show_markers == o.show_markers &&
          source_type == o.source_type &&
          style == o.style &&
          time_column == o.time_column &&
          title_column == o.title_column &&
          value == o.value &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [annotation_type, color, description_columns, hide_line, interval_end_column, name, opacity, overrides, show, show_label, show_markers, source_type, style, time_column, title_column, value, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
