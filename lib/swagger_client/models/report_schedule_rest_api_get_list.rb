=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'date'

module SwaggerClient
  class ReportScheduleRestApiGetList
    attr_accessor :active

    attr_accessor :changed_by

    attr_accessor :changed_on

    attr_accessor :changed_on_delta_humanized

    attr_accessor :created_by

    attr_accessor :created_on

    attr_accessor :creation_method

    attr_accessor :crontab

    attr_accessor :crontab_humanized

    attr_accessor :description

    attr_accessor :id

    attr_accessor :last_eval_dttm

    attr_accessor :last_state

    attr_accessor :name

    attr_accessor :owners

    attr_accessor :recipients

    attr_accessor :timezone

    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'changed_by' => :'changed_by',
        :'changed_on' => :'changed_on',
        :'changed_on_delta_humanized' => :'changed_on_delta_humanized',
        :'created_by' => :'created_by',
        :'created_on' => :'created_on',
        :'creation_method' => :'creation_method',
        :'crontab' => :'crontab',
        :'crontab_humanized' => :'crontab_humanized',
        :'description' => :'description',
        :'id' => :'id',
        :'last_eval_dttm' => :'last_eval_dttm',
        :'last_state' => :'last_state',
        :'name' => :'name',
        :'owners' => :'owners',
        :'recipients' => :'recipients',
        :'timezone' => :'timezone',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Object',
        :'changed_by' => :'Object',
        :'changed_on' => :'Object',
        :'changed_on_delta_humanized' => :'Object',
        :'created_by' => :'Object',
        :'created_on' => :'Object',
        :'creation_method' => :'Object',
        :'crontab' => :'Object',
        :'crontab_humanized' => :'Object',
        :'description' => :'Object',
        :'id' => :'Object',
        :'last_eval_dttm' => :'Object',
        :'last_state' => :'Object',
        :'name' => :'Object',
        :'owners' => :'Object',
        :'recipients' => :'Object',
        :'timezone' => :'Object',
        :'type' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'active',
        :'changed_on',
        :'created_on',
        :'creation_method',
        :'description',
        :'last_eval_dttm',
        :'last_state',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ReportScheduleRestApiGetList` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ReportScheduleRestApiGetList`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'changed_by')
        self.changed_by = attributes[:'changed_by']
      end

      if attributes.key?(:'changed_on')
        self.changed_on = attributes[:'changed_on']
      end

      if attributes.key?(:'changed_on_delta_humanized')
        self.changed_on_delta_humanized = attributes[:'changed_on_delta_humanized']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'creation_method')
        self.creation_method = attributes[:'creation_method']
      end

      if attributes.key?(:'crontab')
        self.crontab = attributes[:'crontab']
      end

      if attributes.key?(:'crontab_humanized')
        self.crontab_humanized = attributes[:'crontab_humanized']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_eval_dttm')
        self.last_eval_dttm = attributes[:'last_eval_dttm']
      end

      if attributes.key?(:'last_state')
        self.last_state = attributes[:'last_state']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'owners')
        self.owners = attributes[:'owners']
      end

      if attributes.key?(:'recipients')
        self.recipients = attributes[:'recipients']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @crontab.nil?
        invalid_properties.push('invalid value for "crontab", crontab cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @recipients.nil?
        invalid_properties.push('invalid value for "recipients", recipients cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @crontab.nil?
      return false if @name.nil?
      return false if @recipients.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          changed_by == o.changed_by &&
          changed_on == o.changed_on &&
          changed_on_delta_humanized == o.changed_on_delta_humanized &&
          created_by == o.created_by &&
          created_on == o.created_on &&
          creation_method == o.creation_method &&
          crontab == o.crontab &&
          crontab_humanized == o.crontab_humanized &&
          description == o.description &&
          id == o.id &&
          last_eval_dttm == o.last_eval_dttm &&
          last_state == o.last_state &&
          name == o.name &&
          owners == o.owners &&
          recipients == o.recipients &&
          timezone == o.timezone &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, changed_by, changed_on, changed_on_delta_humanized, created_by, created_on, creation_method, crontab, crontab_humanized, description, id, last_eval_dttm, last_state, name, owners, recipients, timezone, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
