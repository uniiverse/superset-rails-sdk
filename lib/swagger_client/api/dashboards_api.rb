=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class DashboardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes multiple Dashboards in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [InlineResponse400]
    def api_v1_dashboard_delete(opts = {})
      data, _status_code, _headers = api_v1_dashboard_delete_with_http_info(opts)
      data
    end

    # Deletes multiple Dashboards in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dashboard_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/dashboard/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exports multiple Dashboards and downloads them as YAML files.
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [String]
    def api_v1_dashboard_export_get(opts = {})
      data, _status_code, _headers = api_v1_dashboard_export_get_with_http_info(opts)
      data
    end

    # Exports multiple Dashboards and downloads them as YAML files.
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_dashboard_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_export_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dashboard/export/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check favorited dashboards for current user
    # @param [Hash] opts the optional parameters
    # @option opts [GetFavStarIdsSchema] :q 
    # @return [GetFavStarIdsSchema]
    def api_v1_dashboard_favorite_status_get(opts = {})
      data, _status_code, _headers = api_v1_dashboard_favorite_status_get_with_http_info(opts)
      data
    end

    # Check favorited dashboards for current user
    # @param [Hash] opts the optional parameters
    # @option opts [GetFavStarIdsSchema] :q 
    # @return [Array<(GetFavStarIdsSchema, Integer, Hash)>] GetFavStarIdsSchema data, response status code and response headers
    def api_v1_dashboard_favorite_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_favorite_status_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dashboard/favorite_status/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetFavStarIdsSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_favorite_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [InlineResponse20014]
    def api_v1_dashboard_get(opts = {})
      data, _status_code, _headers = api_v1_dashboard_get_with_http_info(opts)
      data
    end

    # Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def api_v1_dashboard_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dashboard/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20014' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the chart definitions for a given dashboard
    # @param id_or_slug 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20019]
    def api_v1_dashboard_id_or_slug_charts_get(id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_charts_get_with_http_info(id_or_slug, opts)
      data
    end

    # Get the chart definitions for a given dashboard
    # @param id_or_slug 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20019, Integer, Hash)>] InlineResponse20019 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_charts_get_with_http_info(id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_charts_get ...'
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_charts_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/charts'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20019' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_charts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of a dashboard's datasets. Each dataset includes only the information necessary to render the dashboard's charts.
    # @param id_or_slug Either the id of the dashboard, or its slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20020]
    def api_v1_dashboard_id_or_slug_datasets_get(id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_datasets_get_with_http_info(id_or_slug, opts)
      data
    end

    # Returns a list of a dashboard&#x27;s datasets. Each dataset includes only the information necessary to render the dashboard&#x27;s charts.
    # @param id_or_slug Either the id of the dashboard, or its slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20020, Integer, Hash)>] InlineResponse20020 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_datasets_get_with_http_info(id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_datasets_get ...'
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_datasets_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/datasets'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20020' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_datasets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes a dashboard's embedded configuration.
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dashboard_id_or_slug_embedded_delete(id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_embedded_delete_with_http_info(id_or_slug, opts)
      data
    end

    # Removes a dashboard&#x27;s embedded configuration.
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_embedded_delete_with_http_info(id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_embedded_delete ...'
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_delete"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/embedded'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_embedded_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the dashboard's embedded configuration
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def api_v1_dashboard_id_or_slug_embedded_get(id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_embedded_get_with_http_info(id_or_slug, opts)
      data
    end

    # Returns the dashboard&#x27;s embedded configuration
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Integer, Hash)>] InlineResponse20021 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_embedded_get_with_http_info(id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_embedded_get ...'
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/embedded'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20021' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_embedded_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets a dashboard's embedded configuration.
    # @param body The embedded configuration to set
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def api_v1_dashboard_id_or_slug_embedded_post(body, id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_embedded_post_with_http_info(body, id_or_slug, opts)
      data
    end

    # Sets a dashboard&#x27;s embedded configuration.
    # @param body The embedded configuration to set
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Integer, Hash)>] InlineResponse20021 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_embedded_post_with_http_info(body, id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_embedded_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_post"
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_post"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/embedded'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20021' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_embedded_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets a dashboard's embedded configuration.
    # @param body The embedded configuration to set
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def api_v1_dashboard_id_or_slug_embedded_put(body, id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_embedded_put_with_http_info(body, id_or_slug, opts)
      data
    end

    # Sets a dashboard&#x27;s embedded configuration.
    # @param body The embedded configuration to set
    # @param id_or_slug The dashboard id or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Integer, Hash)>] InlineResponse20021 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_embedded_put_with_http_info(body, id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_embedded_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_put"
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_embedded_put"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}/embedded'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20021' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_embedded_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a dashboard detail information.
    # @param id_or_slug Either the id of the dashboard, or its slug
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20018]
    def api_v1_dashboard_id_or_slug_get(id_or_slug, opts = {})
      data, _status_code, _headers = api_v1_dashboard_id_or_slug_get_with_http_info(id_or_slug, opts)
      data
    end

    # Get a dashboard detail information.
    # @param id_or_slug Either the id of the dashboard, or its slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20018, Integer, Hash)>] InlineResponse20018 data, response status code and response headers
    def api_v1_dashboard_id_or_slug_get_with_http_info(id_or_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_id_or_slug_get ...'
      end
      # verify the required parameter 'id_or_slug' is set
      if @api_client.config.client_side_validation && id_or_slug.nil?
        fail ArgumentError, "Missing the required parameter 'id_or_slug' when calling DashboardsApi.api_v1_dashboard_id_or_slug_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{id_or_slug}'.sub('{' + 'id_or_slug' + '}', id_or_slug.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20018' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_id_or_slug_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dashboard_import_post(form_data, overwrite, passwords, opts = {})
      data, _status_code, _headers = api_v1_dashboard_import_post_with_http_info(form_data, overwrite, passwords, opts)
      data
    end

    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dashboard_import_post_with_http_info(form_data, overwrite, passwords, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_import_post ...'
      end
      # verify the required parameter 'form_data' is set
      if @api_client.config.client_side_validation && form_data.nil?
        fail ArgumentError, "Missing the required parameter 'form_data' when calling DashboardsApi.api_v1_dashboard_import_post"
      end
      # verify the required parameter 'overwrite' is set
      if @api_client.config.client_side_validation && overwrite.nil?
        fail ArgumentError, "Missing the required parameter 'overwrite' when calling DashboardsApi.api_v1_dashboard_import_post"
      end
      # verify the required parameter 'passwords' is set
      if @api_client.config.client_side_validation && passwords.nil?
        fail ArgumentError, "Missing the required parameter 'passwords' when calling DashboardsApi.api_v1_dashboard_import_post"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/import/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['formData'] = form_data
      form_params['overwrite'] = overwrite
      form_params['passwords'] = passwords

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Several metadata information about dashboard API endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [InlineResponse2001]
    def api_v1_dashboard_info_get(opts = {})
      data, _status_code, _headers = api_v1_dashboard_info_get_with_http_info(opts)
      data
    end

    # Several metadata information about dashboard API endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def api_v1_dashboard_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_info_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dashboard/_info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Dashboard.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dashboard_pk_delete(pk, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_delete_with_http_info(pk, opts)
      data
    end

    # Deletes a Dashboard.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dashboard_pk_delete_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_pk_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardsApi.api_v1_dashboard_pk_delete"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_pk_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes a Dashboard.
    # @param body Dashboard schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20022]
    def api_v1_dashboard_pk_put(body, pk, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_put_with_http_info(body, pk, opts)
      data
    end

    # Changes a Dashboard.
    # @param body Dashboard schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20022, Integer, Hash)>] InlineResponse20022 data, response status code and response headers
    def api_v1_dashboard_pk_put_with_http_info(body, pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_pk_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardsApi.api_v1_dashboard_pk_put"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardsApi.api_v1_dashboard_pk_put"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20022' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_pk_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compute async or get already computed dashboard thumbnail from cache.
    # @param pk 
    # @param digest A hex digest that makes this dashboard unique
    # @param [Hash] opts the optional parameters
    # @option opts [ThumbnailQuerySchema] :q 
    # @return [String]
    def api_v1_dashboard_pk_thumbnail_digest_get(pk, digest, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_thumbnail_digest_get_with_http_info(pk, digest, opts)
      data
    end

    # Compute async or get already computed dashboard thumbnail from cache.
    # @param pk 
    # @param digest A hex digest that makes this dashboard unique
    # @param [Hash] opts the optional parameters
    # @option opts [ThumbnailQuerySchema] :q 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_dashboard_pk_thumbnail_digest_get_with_http_info(pk, digest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_pk_thumbnail_digest_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardsApi.api_v1_dashboard_pk_thumbnail_digest_get"
      end
      # verify the required parameter 'digest' is set
      if @api_client.config.client_side_validation && digest.nil?
        fail ArgumentError, "Missing the required parameter 'digest' when calling DashboardsApi.api_v1_dashboard_pk_thumbnail_digest_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}/thumbnail/{digest}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'digest' + '}', digest.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_pk_thumbnail_digest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Dashboard.
    # @param body Dashboard schema
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2014]
    def api_v1_dashboard_post(body, opts = {})
      data, _status_code, _headers = api_v1_dashboard_post_with_http_info(body, opts)
      data
    end

    # Create a new Dashboard.
    # @param body Dashboard schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2014, Integer, Hash)>] InlineResponse2014 data, response status code and response headers
    def api_v1_dashboard_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardsApi.api_v1_dashboard_post"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2014' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all possible owners for a dashboard.
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [RelatedResponseSchema]
    def api_v1_dashboard_related_column_name_get(column_name, opts = {})
      data, _status_code, _headers = api_v1_dashboard_related_column_name_get_with_http_info(column_name, opts)
      data
    end

    # Get a list of all possible owners for a dashboard.
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [Array<(RelatedResponseSchema, Integer, Hash)>] RelatedResponseSchema data, response status code and response headers
    def api_v1_dashboard_related_column_name_get_with_http_info(column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.api_v1_dashboard_related_column_name_get ...'
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DashboardsApi.api_v1_dashboard_related_column_name_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/related/{column_name}'.sub('{' + 'column_name' + '}', column_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RelatedResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#api_v1_dashboard_related_column_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
