=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class DatabaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get names of databases currently available
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20026>]
    def api_v1_database_available_get(opts = {})
      data, _status_code, _headers = api_v1_database_available_get_with_http_info(opts)
      data
    end

    # Get names of databases currently available
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20026>, Integer, Hash)>] Array<InlineResponse20026> data, response status code and response headers
    def api_v1_database_available_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_available_get ...'
      end
      # resource path
      local_var_path = '/api/v1/database/available/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<InlineResponse20026>' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download database(s) and associated dataset(s) as a zip file
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [String]
    def api_v1_database_export_get(opts = {})
      data, _status_code, _headers = api_v1_database_export_get_with_http_info(opts)
      data
    end

    # Download database(s) and associated dataset(s) as a zip file
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_database_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_export_get ...'
      end
      # resource path
      local_var_path = '/api/v1/database/export/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of models
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [InlineResponse20025]
    def api_v1_database_get(opts = {})
      data, _status_code, _headers = api_v1_database_get_with_http_info(opts)
      data
    end

    # Get a list of models
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [Array<(InlineResponse20025, Integer, Hash)>] InlineResponse20025 data, response status code and response headers
    def api_v1_database_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_get ...'
      end
      # resource path
      local_var_path = '/api/v1/database/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20025' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_database_import_post(form_data, overwrite, passwords, opts = {})
      data, _status_code, _headers = api_v1_database_import_post_with_http_info(form_data, overwrite, passwords, opts)
      data
    end

    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_database_import_post_with_http_info(form_data, overwrite, passwords, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_import_post ...'
      end
      # verify the required parameter 'form_data' is set
      if @api_client.config.client_side_validation && form_data.nil?
        fail ArgumentError, "Missing the required parameter 'form_data' when calling DatabaseApi.api_v1_database_import_post"
      end
      # verify the required parameter 'overwrite' is set
      if @api_client.config.client_side_validation && overwrite.nil?
        fail ArgumentError, "Missing the required parameter 'overwrite' when calling DatabaseApi.api_v1_database_import_post"
      end
      # verify the required parameter 'passwords' is set
      if @api_client.config.client_side_validation && passwords.nil?
        fail ArgumentError, "Missing the required parameter 'passwords' when calling DatabaseApi.api_v1_database_import_post"
      end
      # resource path
      local_var_path = '/api/v1/database/import/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['formData'] = form_data
      form_params['overwrite'] = overwrite
      form_params['passwords'] = passwords

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata information about this API resource
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [InlineResponse2001]
    def api_v1_database_info_get(opts = {})
      data, _status_code, _headers = api_v1_database_info_get_with_http_info(opts)
      data
    end

    # Get metadata information about this API resource
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def api_v1_database_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_info_get ...'
      end
      # resource path
      local_var_path = '/api/v1/database/_info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Database.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_database_pk_delete(pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_delete_with_http_info(pk, opts)
      data
    end

    # Deletes a Database.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_database_pk_delete_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_delete"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get function names supported by a database
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [DatabaseFunctionNamesResponse]
    def api_v1_database_pk_function_names_get(pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_function_names_get_with_http_info(pk, opts)
      data
    end

    # Get function names supported by a database
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DatabaseFunctionNamesResponse, Integer, Hash)>] DatabaseFunctionNamesResponse data, response status code and response headers
    def api_v1_database_pk_function_names_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_function_names_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_function_names_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/function_names/'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DatabaseFunctionNamesResponse' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_function_names_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an item model
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [InlineResponse20027]
    def api_v1_database_pk_get(pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_get_with_http_info(pk, opts)
      data
    end

    # Get an item model
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [Array<(InlineResponse20027, Integer, Hash)>] InlineResponse20027 data, response status code and response headers
    def api_v1_database_pk_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20027' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes a Database.
    # @param body Database schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20028]
    def api_v1_database_pk_put(body, pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_put_with_http_info(body, pk, opts)
      data
    end

    # Changes a Database.
    # @param body Database schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20028, Integer, Hash)>] InlineResponse20028 data, response status code and response headers
    def api_v1_database_pk_put_with_http_info(body, pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatabaseApi.api_v1_database_pk_put"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_put"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20028' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get charts and dashboards count associated to a database
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [DatabaseRelatedObjectsResponse]
    def api_v1_database_pk_related_objects_get(pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_related_objects_get_with_http_info(pk, opts)
      data
    end

    # Get charts and dashboards count associated to a database
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DatabaseRelatedObjectsResponse, Integer, Hash)>] DatabaseRelatedObjectsResponse data, response status code and response headers
    def api_v1_database_pk_related_objects_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_related_objects_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_related_objects_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/related_objects/'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DatabaseRelatedObjectsResponse' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_related_objects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all schemas from a database
    # @param pk The database id
    # @param [Hash] opts the optional parameters
    # @option opts [DatabaseSchemasQuerySchema] :q 
    # @return [SchemasResponseSchema]
    def api_v1_database_pk_schemas_get(pk, opts = {})
      data, _status_code, _headers = api_v1_database_pk_schemas_get_with_http_info(pk, opts)
      data
    end

    # Get all schemas from a database
    # @param pk The database id
    # @param [Hash] opts the optional parameters
    # @option opts [DatabaseSchemasQuerySchema] :q 
    # @return [Array<(SchemasResponseSchema, Integer, Hash)>] SchemasResponseSchema data, response status code and response headers
    def api_v1_database_pk_schemas_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_schemas_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_schemas_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/schemas/'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SchemasResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_schemas_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get database select star for table
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [SelectStarResponseSchema]
    def api_v1_database_pk_select_star_table_name_get(pk, table_name, schema_name, opts = {})
      data, _status_code, _headers = api_v1_database_pk_select_star_table_name_get_with_http_info(pk, table_name, schema_name, opts)
      data
    end

    # Get database select star for table
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelectStarResponseSchema, Integer, Hash)>] SelectStarResponseSchema data, response status code and response headers
    def api_v1_database_pk_select_star_table_name_get_with_http_info(pk, table_name, schema_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_select_star_table_name_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_get"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_get"
      end
      # verify the required parameter 'schema_name' is set
      if @api_client.config.client_side_validation && schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'schema_name' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/select_star/{table_name}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'table_name' + '}', table_name.to_s).sub('{' + 'schema_name' + '}', schema_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SelectStarResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_select_star_table_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get database select star for table
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [SelectStarResponseSchema]
    def api_v1_database_pk_select_star_table_name_schema_name_get(pk, table_name, schema_name, opts = {})
      data, _status_code, _headers = api_v1_database_pk_select_star_table_name_schema_name_get_with_http_info(pk, table_name, schema_name, opts)
      data
    end

    # Get database select star for table
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(SelectStarResponseSchema, Integer, Hash)>] SelectStarResponseSchema data, response status code and response headers
    def api_v1_database_pk_select_star_table_name_schema_name_get_with_http_info(pk, table_name, schema_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_select_star_table_name_schema_name_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_schema_name_get"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_schema_name_get"
      end
      # verify the required parameter 'schema_name' is set
      if @api_client.config.client_side_validation && schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'schema_name' when calling DatabaseApi.api_v1_database_pk_select_star_table_name_schema_name_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/select_star/{table_name}/{schema_name}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'table_name' + '}', table_name.to_s).sub('{' + 'schema_name' + '}', schema_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SelectStarResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_select_star_table_name_schema_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get database table metadata
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [TableMetadataResponseSchema]
    def api_v1_database_pk_table_table_name_schema_name_get(pk, table_name, schema_name, opts = {})
      data, _status_code, _headers = api_v1_database_pk_table_table_name_schema_name_get_with_http_info(pk, table_name, schema_name, opts)
      data
    end

    # Get database table metadata
    # @param pk The database id
    # @param table_name Table name
    # @param schema_name Table schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(TableMetadataResponseSchema, Integer, Hash)>] TableMetadataResponseSchema data, response status code and response headers
    def api_v1_database_pk_table_table_name_schema_name_get_with_http_info(pk, table_name, schema_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_pk_table_table_name_schema_name_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatabaseApi.api_v1_database_pk_table_table_name_schema_name_get"
      end
      # verify the required parameter 'table_name' is set
      if @api_client.config.client_side_validation && table_name.nil?
        fail ArgumentError, "Missing the required parameter 'table_name' when calling DatabaseApi.api_v1_database_pk_table_table_name_schema_name_get"
      end
      # verify the required parameter 'schema_name' is set
      if @api_client.config.client_side_validation && schema_name.nil?
        fail ArgumentError, "Missing the required parameter 'schema_name' when calling DatabaseApi.api_v1_database_pk_table_table_name_schema_name_get"
      end
      # resource path
      local_var_path = '/api/v1/database/{pk}/table/{table_name}/{schema_name}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'table_name' + '}', table_name.to_s).sub('{' + 'schema_name' + '}', schema_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TableMetadataResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_pk_table_table_name_schema_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Database.
    # @param body Database schema
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2018]
    def api_v1_database_post(body, opts = {})
      data, _status_code, _headers = api_v1_database_post_with_http_info(body, opts)
      data
    end

    # Create a new Database.
    # @param body Database schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2018, Integer, Hash)>] InlineResponse2018 data, response status code and response headers
    def api_v1_database_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatabaseApi.api_v1_database_post"
      end
      # resource path
      local_var_path = '/api/v1/database/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2018' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tests a database connection
    # @param body Database schema
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_database_test_connection_post(body, opts = {})
      data, _status_code, _headers = api_v1_database_test_connection_post_with_http_info(body, opts)
      data
    end

    # Tests a database connection
    # @param body Database schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_database_test_connection_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_test_connection_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatabaseApi.api_v1_database_test_connection_post"
      end
      # resource path
      local_var_path = '/api/v1/database/test_connection'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_test_connection_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validates parameters used to connect to a database
    # @param body DB-specific parameters
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_database_validate_parameters_post(body, opts = {})
      data, _status_code, _headers = api_v1_database_validate_parameters_post_with_http_info(body, opts)
      data
    end

    # Validates parameters used to connect to a database
    # @param body DB-specific parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_database_validate_parameters_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatabaseApi.api_v1_database_validate_parameters_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatabaseApi.api_v1_database_validate_parameters_post"
      end
      # resource path
      local_var_path = '/api/v1/database/validate_parameters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatabaseApi#api_v1_database_validate_parameters_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
