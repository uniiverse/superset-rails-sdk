=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class ImportexportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def api_v1_assets_export_get(opts = {})
      data, _status_code, _headers = api_v1_assets_export_get_with_http_info(opts)
      data
    end

    # Returns a ZIP file with all the Superset assets (databases, datasets, charts, dashboards, saved queries) as YAML files.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_assets_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportexportApi.api_v1_assets_export_get ...'
      end
      # resource path
      local_var_path = '/api/v1/assets/export/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportexportApi#api_v1_assets_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param bundle 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_assets_import_post(bundle, passwords, opts = {})
      data, _status_code, _headers = api_v1_assets_import_post_with_http_info(bundle, passwords, opts)
      data
    end

    # @param bundle 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_assets_import_post_with_http_info(bundle, passwords, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportexportApi.api_v1_assets_import_post ...'
      end
      # verify the required parameter 'bundle' is set
      if @api_client.config.client_side_validation && bundle.nil?
        fail ArgumentError, "Missing the required parameter 'bundle' when calling ImportexportApi.api_v1_assets_import_post"
      end
      # verify the required parameter 'passwords' is set
      if @api_client.config.client_side_validation && passwords.nil?
        fail ArgumentError, "Missing the required parameter 'passwords' when calling ImportexportApi.api_v1_assets_import_post"
      end
      # resource path
      local_var_path = '/api/v1/assets/import/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['bundle'] = bundle
      form_params['passwords'] = passwords

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportexportApi#api_v1_assets_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
