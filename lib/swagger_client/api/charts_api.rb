=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class ChartsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Takes a query context cache key and returns payload data response for the given query.
    # @param cache_key 
    # @param [Hash] opts the optional parameters
    # @return [ChartDataResponseSchema]
    def api_v1_chart_data_cache_key_get(cache_key, opts = {})
      data, _status_code, _headers = api_v1_chart_data_cache_key_get_with_http_info(cache_key, opts)
      data
    end

    # Takes a query context cache key and returns payload data response for the given query.
    # @param cache_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChartDataResponseSchema, Integer, Hash)>] ChartDataResponseSchema data, response status code and response headers
    def api_v1_chart_data_cache_key_get_with_http_info(cache_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_data_cache_key_get ...'
      end
      # verify the required parameter 'cache_key' is set
      if @api_client.config.client_side_validation && cache_key.nil?
        fail ArgumentError, "Missing the required parameter 'cache_key' when calling ChartsApi.api_v1_chart_data_cache_key_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/data/{cache_key}'.sub('{' + 'cache_key' + '}', cache_key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ChartDataResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_data_cache_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a query context constructed in the client and returns payload data response for the given query.
    # @param body A query context consists of a datasource from which to fetch data and one or many query objects.
    # @param [Hash] opts the optional parameters
    # @return [ChartDataResponseSchema]
    def api_v1_chart_data_post(body, opts = {})
      data, _status_code, _headers = api_v1_chart_data_post_with_http_info(body, opts)
      data
    end

    # Takes a query context constructed in the client and returns payload data response for the given query.
    # @param body A query context consists of a datasource from which to fetch data and one or many query objects.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChartDataResponseSchema, Integer, Hash)>] ChartDataResponseSchema data, response status code and response headers
    def api_v1_chart_data_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_data_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ChartsApi.api_v1_chart_data_post"
      end
      # resource path
      local_var_path = '/api/v1/chart/data'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ChartDataResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_data_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes multiple Charts in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [InlineResponse400]
    def api_v1_chart_delete(opts = {})
      data, _status_code, _headers = api_v1_chart_delete_with_http_info(opts)
      data
    end

    # Deletes multiple Charts in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_chart_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/chart/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exports multiple charts and downloads them as YAML files
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [String]
    def api_v1_chart_export_get(opts = {})
      data, _status_code, _headers = api_v1_chart_export_get_with_http_info(opts)
      data
    end

    # Exports multiple charts and downloads them as YAML files
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_chart_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_export_get ...'
      end
      # resource path
      local_var_path = '/api/v1/chart/export/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check favorited dashboards for current user
    # @param [Hash] opts the optional parameters
    # @option opts [GetFavStarIdsSchema] :q 
    # @return [GetFavStarIdsSchema]
    def api_v1_chart_favorite_status_get(opts = {})
      data, _status_code, _headers = api_v1_chart_favorite_status_get_with_http_info(opts)
      data
    end

    # Check favorited dashboards for current user
    # @param [Hash] opts the optional parameters
    # @option opts [GetFavStarIdsSchema] :q 
    # @return [Array<(GetFavStarIdsSchema, Integer, Hash)>] GetFavStarIdsSchema data, response status code and response headers
    def api_v1_chart_favorite_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_favorite_status_get ...'
      end
      # resource path
      local_var_path = '/api/v1/chart/favorite_status/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetFavStarIdsSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_favorite_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [InlineResponse2008]
    def api_v1_chart_get(opts = {})
      data, _status_code, _headers = api_v1_chart_get_with_http_info(opts)
      data
    end

    # Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def api_v1_chart_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_get ...'
      end
      # resource path
      local_var_path = '/api/v1/chart/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_chart_import_post(form_data, overwrite, passwords, opts = {})
      data, _status_code, _headers = api_v1_chart_import_post_with_http_info(form_data, overwrite, passwords, opts)
      data
    end

    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_chart_import_post_with_http_info(form_data, overwrite, passwords, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_import_post ...'
      end
      # verify the required parameter 'form_data' is set
      if @api_client.config.client_side_validation && form_data.nil?
        fail ArgumentError, "Missing the required parameter 'form_data' when calling ChartsApi.api_v1_chart_import_post"
      end
      # verify the required parameter 'overwrite' is set
      if @api_client.config.client_side_validation && overwrite.nil?
        fail ArgumentError, "Missing the required parameter 'overwrite' when calling ChartsApi.api_v1_chart_import_post"
      end
      # verify the required parameter 'passwords' is set
      if @api_client.config.client_side_validation && passwords.nil?
        fail ArgumentError, "Missing the required parameter 'passwords' when calling ChartsApi.api_v1_chart_import_post"
      end
      # resource path
      local_var_path = '/api/v1/chart/import/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['formData'] = form_data
      form_params['overwrite'] = overwrite
      form_params['passwords'] = passwords

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Several metadata information about chart API endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [InlineResponse2001]
    def api_v1_chart_info_get(opts = {})
      data, _status_code, _headers = api_v1_chart_info_get_with_http_info(opts)
      data
    end

    # Several metadata information about chart API endpoints.
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def api_v1_chart_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_info_get ...'
      end
      # resource path
      local_var_path = '/api/v1/chart/_info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compute and cache a screenshot.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [ScreenshotQuerySchema] :q 
    # @return [ChartCacheScreenshotResponseSchema]
    def api_v1_chart_pk_cache_screenshot_get(pk, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_cache_screenshot_get_with_http_info(pk, opts)
      data
    end

    # Compute and cache a screenshot.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [ScreenshotQuerySchema] :q 
    # @return [Array<(ChartCacheScreenshotResponseSchema, Integer, Hash)>] ChartCacheScreenshotResponseSchema data, response status code and response headers
    def api_v1_chart_pk_cache_screenshot_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_cache_screenshot_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_cache_screenshot_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}/cache_screenshot/'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ChartCacheScreenshotResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_cache_screenshot_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
    # @param pk The chart ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format in which the data should be returned
    # @option opts [String] :type The type in which the data should be returned
    # @return [ChartDataResponseSchema]
    def api_v1_chart_pk_data_get(pk, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_data_get_with_http_info(pk, opts)
      data
    end

    # Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
    # @param pk The chart ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format in which the data should be returned
    # @option opts [String] :type The type in which the data should be returned
    # @return [Array<(ChartDataResponseSchema, Integer, Hash)>] ChartDataResponseSchema data, response status code and response headers
    def api_v1_chart_pk_data_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_data_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_data_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}/data/'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ChartDataResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_data_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Chart.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_chart_pk_delete(pk, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_delete_with_http_info(pk, opts)
      data
    end

    # Deletes a Chart.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_chart_pk_delete_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_delete"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a chart detail information.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [InlineResponse2009]
    def api_v1_chart_pk_get(pk, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_get_with_http_info(pk, opts)
      data
    end

    # Get a chart detail information.
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def api_v1_chart_pk_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2009' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes a Chart.
    # @param body Chart schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20010]
    def api_v1_chart_pk_put(body, pk, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_put_with_http_info(body, pk, opts)
      data
    end

    # Changes a Chart.
    # @param body Chart schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def api_v1_chart_pk_put_with_http_info(body, pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ChartsApi.api_v1_chart_pk_put"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_put"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20010' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a computed screenshot from cache.
    # @param pk 
    # @param digest 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def api_v1_chart_pk_screenshot_digest_get(pk, digest, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_screenshot_digest_get_with_http_info(pk, digest, opts)
      data
    end

    # Get a computed screenshot from cache.
    # @param pk 
    # @param digest 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_chart_pk_screenshot_digest_get_with_http_info(pk, digest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_screenshot_digest_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_screenshot_digest_get"
      end
      # verify the required parameter 'digest' is set
      if @api_client.config.client_side_validation && digest.nil?
        fail ArgumentError, "Missing the required parameter 'digest' when calling ChartsApi.api_v1_chart_pk_screenshot_digest_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}/screenshot/{digest}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'digest' + '}', digest.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_screenshot_digest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compute or get already computed chart thumbnail from cache.
    # @param pk 
    # @param digest 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def api_v1_chart_pk_thumbnail_digest_get(pk, digest, opts = {})
      data, _status_code, _headers = api_v1_chart_pk_thumbnail_digest_get_with_http_info(pk, digest, opts)
      data
    end

    # Compute or get already computed chart thumbnail from cache.
    # @param pk 
    # @param digest 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_chart_pk_thumbnail_digest_get_with_http_info(pk, digest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_pk_thumbnail_digest_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling ChartsApi.api_v1_chart_pk_thumbnail_digest_get"
      end
      # verify the required parameter 'digest' is set
      if @api_client.config.client_side_validation && digest.nil?
        fail ArgumentError, "Missing the required parameter 'digest' when calling ChartsApi.api_v1_chart_pk_thumbnail_digest_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/{pk}/thumbnail/{digest}/'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'digest' + '}', digest.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_pk_thumbnail_digest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Chart.
    # @param body Chart schema
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def api_v1_chart_post(body, opts = {})
      data, _status_code, _headers = api_v1_chart_post_with_http_info(body, opts)
      data
    end

    # Create a new Chart.
    # @param body Chart schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Integer, Hash)>] InlineResponse2012 data, response status code and response headers
    def api_v1_chart_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ChartsApi.api_v1_chart_post"
      end
      # resource path
      local_var_path = '/api/v1/chart/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2012' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all possible owners for a chart. Use `owners` has the `column_name` parameter
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [RelatedResponseSchema]
    def api_v1_chart_related_column_name_get(column_name, opts = {})
      data, _status_code, _headers = api_v1_chart_related_column_name_get_with_http_info(column_name, opts)
      data
    end

    # Get a list of all possible owners for a chart. Use &#x60;owners&#x60; has the &#x60;column_name&#x60; parameter
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [Array<(RelatedResponseSchema, Integer, Hash)>] RelatedResponseSchema data, response status code and response headers
    def api_v1_chart_related_column_name_get_with_http_info(column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartsApi.api_v1_chart_related_column_name_get ...'
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling ChartsApi.api_v1_chart_related_column_name_get"
      end
      # resource path
      local_var_path = '/api/v1/chart/related/{column_name}'.sub('{' + 'column_name' + '}', column_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RelatedResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartsApi#api_v1_chart_related_column_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
