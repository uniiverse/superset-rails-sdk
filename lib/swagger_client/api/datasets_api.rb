=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class DatasetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes multiple Datasets in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [InlineResponse400]
    def api_v1_dataset_delete(opts = {})
      data, _status_code, _headers = api_v1_dataset_delete_with_http_info(opts)
      data
    end

    # Deletes multiple Datasets in a bulk operation.
    # @param [Hash] opts the optional parameters
    # @option opts [GetDeleteIdsSchema] :q 
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/dataset/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [DistincResponseSchema]
    def api_v1_dataset_distinct_column_name_get(column_name, opts = {})
      data, _status_code, _headers = api_v1_dataset_distinct_column_name_get_with_http_info(column_name, opts)
      data
    end

    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [Array<(DistincResponseSchema, Integer, Hash)>] DistincResponseSchema data, response status code and response headers
    def api_v1_dataset_distinct_column_name_get_with_http_info(column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_distinct_column_name_get ...'
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DatasetsApi.api_v1_dataset_distinct_column_name_get"
      end
      # resource path
      local_var_path = '/api/v1/dataset/distinct/{column_name}'.sub('{' + 'column_name' + '}', column_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DistincResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_distinct_column_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exports multiple datasets and downloads them as YAML files
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [String]
    def api_v1_dataset_export_get(opts = {})
      data, _status_code, _headers = api_v1_dataset_export_get_with_http_info(opts)
      data
    end

    # Exports multiple datasets and downloads them as YAML files
    # @param [Hash] opts the optional parameters
    # @option opts [GetExportIdsSchema] :q 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def api_v1_dataset_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_export_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dataset/export/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of models
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [InlineResponse20029]
    def api_v1_dataset_get(opts = {})
      data, _status_code, _headers = api_v1_dataset_get_with_http_info(opts)
      data
    end

    # Get a list of models
    # @param [Hash] opts the optional parameters
    # @option opts [GetListSchema] :q 
    # @return [Array<(InlineResponse20029, Integer, Hash)>] InlineResponse20029 data, response status code and response headers
    def api_v1_dataset_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dataset/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20029' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dataset_import_post(form_data, overwrite, passwords, opts = {})
      data, _status_code, _headers = api_v1_dataset_import_post_with_http_info(form_data, overwrite, passwords, opts)
      data
    end

    # @param form_data 
    # @param overwrite 
    # @param passwords 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_import_post_with_http_info(form_data, overwrite, passwords, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_import_post ...'
      end
      # verify the required parameter 'form_data' is set
      if @api_client.config.client_side_validation && form_data.nil?
        fail ArgumentError, "Missing the required parameter 'form_data' when calling DatasetsApi.api_v1_dataset_import_post"
      end
      # verify the required parameter 'overwrite' is set
      if @api_client.config.client_side_validation && overwrite.nil?
        fail ArgumentError, "Missing the required parameter 'overwrite' when calling DatasetsApi.api_v1_dataset_import_post"
      end
      # verify the required parameter 'passwords' is set
      if @api_client.config.client_side_validation && passwords.nil?
        fail ArgumentError, "Missing the required parameter 'passwords' when calling DatasetsApi.api_v1_dataset_import_post"
      end
      # resource path
      local_var_path = '/api/v1/dataset/import/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['formData'] = form_data
      form_params['overwrite'] = overwrite
      form_params['passwords'] = passwords

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get metadata information about this API resource
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [InlineResponse2001]
    def api_v1_dataset_info_get(opts = {})
      data, _status_code, _headers = api_v1_dataset_info_get_with_http_info(opts)
      data
    end

    # Get metadata information about this API resource
    # @param [Hash] opts the optional parameters
    # @option opts [GetInfoSchema] :q 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def api_v1_dataset_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_info_get ...'
      end
      # resource path
      local_var_path = '/api/v1/dataset/_info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Dataset column
    # @param pk The dataset pk for this column
    # @param column_id The column id for this dataset
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dataset_pk_column_column_id_delete(pk, column_id, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_column_column_id_delete_with_http_info(pk, column_id, opts)
      data
    end

    # Delete a Dataset column
    # @param pk The dataset pk for this column
    # @param column_id The column id for this dataset
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_pk_column_column_id_delete_with_http_info(pk, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_column_column_id_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_column_column_id_delete"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling DatasetsApi.api_v1_dataset_pk_column_column_id_delete"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}/column/{column_id}'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'column_id' + '}', column_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_column_column_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dataset_pk_delete(pk, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_delete_with_http_info(pk, opts)
      data
    end

    # Deletes a Dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_pk_delete_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_delete"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an item model
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [InlineResponse20030]
    def api_v1_dataset_pk_get(pk, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_get_with_http_info(pk, opts)
      data
    end

    # Get an item model
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [GetItemSchema] :q 
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def api_v1_dataset_pk_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_get"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20030' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Dataset metric
    # @param pk The dataset pk for this column
    # @param metric_id The metric id for this dataset
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dataset_pk_metric_metric_id_delete(pk, metric_id, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_metric_metric_id_delete_with_http_info(pk, metric_id, opts)
      data
    end

    # Delete a Dataset metric
    # @param pk The dataset pk for this column
    # @param metric_id The metric id for this dataset
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_pk_metric_metric_id_delete_with_http_info(pk, metric_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_metric_metric_id_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_metric_metric_id_delete"
      end
      # verify the required parameter 'metric_id' is set
      if @api_client.config.client_side_validation && metric_id.nil?
        fail ArgumentError, "Missing the required parameter 'metric_id' when calling DatasetsApi.api_v1_dataset_pk_metric_metric_id_delete"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}/metric/{metric_id}'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'metric_id' + '}', metric_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_metric_metric_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes a Dataset
    # @param body Dataset schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_columns 
    # @return [InlineResponse20031]
    def api_v1_dataset_pk_put(body, pk, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_put_with_http_info(body, pk, opts)
      data
    end

    # Changes a Dataset
    # @param body Dataset schema
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_columns 
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def api_v1_dataset_pk_put_with_http_info(body, pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatasetsApi.api_v1_dataset_pk_put"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_put"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'override_columns'] = opts[:'override_columns'] if !opts[:'override_columns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20031' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refreshes and updates columns of a dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse400]
    def api_v1_dataset_pk_refresh_put(pk, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_refresh_put_with_http_info(pk, opts)
      data
    end

    # Refreshes and updates columns of a dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse400, Integer, Hash)>] InlineResponse400 data, response status code and response headers
    def api_v1_dataset_pk_refresh_put_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_refresh_put ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_refresh_put"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}/refresh'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse400' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_refresh_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get charts and dashboards count associated to a dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [DatasetRelatedObjectsResponse]
    def api_v1_dataset_pk_related_objects_get(pk, opts = {})
      data, _status_code, _headers = api_v1_dataset_pk_related_objects_get_with_http_info(pk, opts)
      data
    end

    # Get charts and dashboards count associated to a dataset
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DatasetRelatedObjectsResponse, Integer, Hash)>] DatasetRelatedObjectsResponse data, response status code and response headers
    def api_v1_dataset_pk_related_objects_get_with_http_info(pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_pk_related_objects_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DatasetsApi.api_v1_dataset_pk_related_objects_get"
      end
      # resource path
      local_var_path = '/api/v1/dataset/{pk}/related_objects'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DatasetRelatedObjectsResponse' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_pk_related_objects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Dataset
    # @param body Dataset schema
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2019]
    def api_v1_dataset_post(body, opts = {})
      data, _status_code, _headers = api_v1_dataset_post_with_http_info(body, opts)
      data
    end

    # Create a new Dataset
    # @param body Dataset schema
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2019, Integer, Hash)>] InlineResponse2019 data, response status code and response headers
    def api_v1_dataset_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DatasetsApi.api_v1_dataset_post"
      end
      # resource path
      local_var_path = '/api/v1/dataset/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2019' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [RelatedResponseSchema]
    def api_v1_dataset_related_column_name_get(column_name, opts = {})
      data, _status_code, _headers = api_v1_dataset_related_column_name_get_with_http_info(column_name, opts)
      data
    end

    # @param column_name 
    # @param [Hash] opts the optional parameters
    # @option opts [GetRelatedSchema] :q 
    # @return [Array<(RelatedResponseSchema, Integer, Hash)>] RelatedResponseSchema data, response status code and response headers
    def api_v1_dataset_related_column_name_get_with_http_info(column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatasetsApi.api_v1_dataset_related_column_name_get ...'
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling DatasetsApi.api_v1_dataset_related_column_name_get"
      end
      # resource path
      local_var_path = '/api/v1/dataset/related/{column_name}'.sub('{' + 'column_name' + '}', column_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RelatedResponseSchema' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatasetsApi#api_v1_dataset_related_column_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
