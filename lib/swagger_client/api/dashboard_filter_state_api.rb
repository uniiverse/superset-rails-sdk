=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class DashboardFilterStateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes a value.
    # @param pk 
    # @param key The value key.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20024]
    def api_v1_dashboard_pk_filter_state_key_delete(pk, key, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_filter_state_key_delete_with_http_info(pk, key, opts)
      data
    end

    # Deletes a value.
    # @param pk 
    # @param key The value key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20024, Integer, Hash)>] InlineResponse20024 data, response status code and response headers
    def api_v1_dashboard_pk_filter_state_key_delete_with_http_info(pk, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_delete ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_delete"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_delete"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}/filter_state/{key}'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20024' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardFilterStateApi#api_v1_dashboard_pk_filter_state_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrives a value.
    # @param pk 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20023]
    def api_v1_dashboard_pk_filter_state_key_get(pk, key, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_filter_state_key_get_with_http_info(pk, key, opts)
      data
    end

    # Retrives a value.
    # @param pk 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20023, Integer, Hash)>] InlineResponse20023 data, response status code and response headers
    def api_v1_dashboard_pk_filter_state_key_get_with_http_info(pk, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_get ...'
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_get"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}/filter_state/{key}'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20023' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardFilterStateApi#api_v1_dashboard_pk_filter_state_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing value.
    # @param body 
    # @param pk 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tab_id 
    # @return [InlineResponse2016]
    def api_v1_dashboard_pk_filter_state_key_put(body, pk, key, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_filter_state_key_put_with_http_info(body, pk, key, opts)
      data
    end

    # Updates an existing value.
    # @param body 
    # @param pk 
    # @param key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tab_id 
    # @return [Array<(InlineResponse2016, Integer, Hash)>] InlineResponse2016 data, response status code and response headers
    def api_v1_dashboard_pk_filter_state_key_put_with_http_info(body, pk, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_put"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_put"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_key_put"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}/filter_state/{key}'.sub('{' + 'pk' + '}', pk.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tab_id'] = opts[:'tab_id'] if !opts[:'tab_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2016' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardFilterStateApi#api_v1_dashboard_pk_filter_state_key_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Stores a new value.
    # @param body 
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tab_id 
    # @return [InlineResponse2016]
    def api_v1_dashboard_pk_filter_state_post(body, pk, opts = {})
      data, _status_code, _headers = api_v1_dashboard_pk_filter_state_post_with_http_info(body, pk, opts)
      data
    end

    # Stores a new value.
    # @param body 
    # @param pk 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :tab_id 
    # @return [Array<(InlineResponse2016, Integer, Hash)>] InlineResponse2016 data, response status code and response headers
    def api_v1_dashboard_pk_filter_state_post_with_http_info(body, pk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_post"
      end
      # verify the required parameter 'pk' is set
      if @api_client.config.client_side_validation && pk.nil?
        fail ArgumentError, "Missing the required parameter 'pk' when calling DashboardFilterStateApi.api_v1_dashboard_pk_filter_state_post"
      end
      # resource path
      local_var_path = '/api/v1/dashboard/{pk}/filter_state'.sub('{' + 'pk' + '}', pk.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tab_id'] = opts[:'tab_id'] if !opts[:'tab_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse2016' 

      auth_names = opts[:auth_names] || ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardFilterStateApi#api_v1_dashboard_pk_filter_state_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
