=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DatabaseApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DatabaseApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DatabaseApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DatabaseApi' do
    it 'should create an instance of DatabaseApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DatabaseApi)
    end
  end

  # unit tests for api_v1_database_available_get
  # Get names of databases currently available
  # @param [Hash] opts the optional parameters
  # @return [Array<InlineResponse20026>]
  describe 'api_v1_database_available_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_export_get
  # Download database(s) and associated dataset(s) as a zip file
  # @param [Hash] opts the optional parameters
  # @option opts [GetExportIdsSchema] :q 
  # @return [String]
  describe 'api_v1_database_export_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_get
  # Get a list of models
  # @param [Hash] opts the optional parameters
  # @option opts [GetListSchema] :q 
  # @return [InlineResponse20025]
  describe 'api_v1_database_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_import_post
  # @param form_data 
  # @param overwrite 
  # @param passwords 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_database_import_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_info_get
  # Get metadata information about this API resource
  # @param [Hash] opts the optional parameters
  # @option opts [GetInfoSchema] :q 
  # @return [InlineResponse2001]
  describe 'api_v1_database_info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_delete
  # Deletes a Database.
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_database_pk_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_function_names_get
  # Get function names supported by a database
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [DatabaseFunctionNamesResponse]
  describe 'api_v1_database_pk_function_names_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_get
  # Get an item model
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @option opts [GetItemSchema] :q 
  # @return [InlineResponse20027]
  describe 'api_v1_database_pk_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_put
  # Changes a Database.
  # @param body Database schema
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20028]
  describe 'api_v1_database_pk_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_related_objects_get
  # Get charts and dashboards count associated to a database
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [DatabaseRelatedObjectsResponse]
  describe 'api_v1_database_pk_related_objects_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_schemas_get
  # Get all schemas from a database
  # @param pk The database id
  # @param [Hash] opts the optional parameters
  # @option opts [DatabaseSchemasQuerySchema] :q 
  # @return [SchemasResponseSchema]
  describe 'api_v1_database_pk_schemas_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_select_star_table_name_get
  # Get database select star for table
  # @param pk The database id
  # @param table_name Table name
  # @param schema_name Table schema
  # @param [Hash] opts the optional parameters
  # @return [SelectStarResponseSchema]
  describe 'api_v1_database_pk_select_star_table_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_select_star_table_name_schema_name_get
  # Get database select star for table
  # @param pk The database id
  # @param table_name Table name
  # @param schema_name Table schema
  # @param [Hash] opts the optional parameters
  # @return [SelectStarResponseSchema]
  describe 'api_v1_database_pk_select_star_table_name_schema_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_pk_table_table_name_schema_name_get
  # Get database table metadata
  # @param pk The database id
  # @param table_name Table name
  # @param schema_name Table schema
  # @param [Hash] opts the optional parameters
  # @return [TableMetadataResponseSchema]
  describe 'api_v1_database_pk_table_table_name_schema_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_post
  # Create a new Database.
  # @param body Database schema
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2018]
  describe 'api_v1_database_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_test_connection_post
  # Tests a database connection
  # @param body Database schema
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_database_test_connection_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_database_validate_parameters_post
  # Validates parameters used to connect to a database
  # @param body DB-specific parameters
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_database_validate_parameters_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
