=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ChartsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ChartsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ChartsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChartsApi' do
    it 'should create an instance of ChartsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ChartsApi)
    end
  end

  # unit tests for api_v1_chart_data_cache_key_get
  # Takes a query context cache key and returns payload data response for the given query.
  # @param cache_key 
  # @param [Hash] opts the optional parameters
  # @return [ChartDataResponseSchema]
  describe 'api_v1_chart_data_cache_key_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_data_post
  # Takes a query context constructed in the client and returns payload data response for the given query.
  # @param body A query context consists of a datasource from which to fetch data and one or many query objects.
  # @param [Hash] opts the optional parameters
  # @return [ChartDataResponseSchema]
  describe 'api_v1_chart_data_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_delete
  # Deletes multiple Charts in a bulk operation.
  # @param [Hash] opts the optional parameters
  # @option opts [GetDeleteIdsSchema] :q 
  # @return [InlineResponse400]
  describe 'api_v1_chart_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_export_get
  # Exports multiple charts and downloads them as YAML files
  # @param [Hash] opts the optional parameters
  # @option opts [GetExportIdsSchema] :q 
  # @return [String]
  describe 'api_v1_chart_export_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_favorite_status_get
  # Check favorited dashboards for current user
  # @param [Hash] opts the optional parameters
  # @option opts [GetFavStarIdsSchema] :q 
  # @return [GetFavStarIdsSchema]
  describe 'api_v1_chart_favorite_status_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_get
  # Get a list of charts, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
  # @param [Hash] opts the optional parameters
  # @option opts [GetListSchema] :q 
  # @return [InlineResponse2008]
  describe 'api_v1_chart_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_import_post
  # @param form_data 
  # @param overwrite 
  # @param passwords 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_chart_import_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_info_get
  # Several metadata information about chart API endpoints.
  # @param [Hash] opts the optional parameters
  # @option opts [GetInfoSchema] :q 
  # @return [InlineResponse2001]
  describe 'api_v1_chart_info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_cache_screenshot_get
  # Compute and cache a screenshot.
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @option opts [ScreenshotQuerySchema] :q 
  # @return [ChartCacheScreenshotResponseSchema]
  describe 'api_v1_chart_pk_cache_screenshot_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_data_get
  # Takes a chart ID and uses the query context stored when the chart was saved to return payload data response.
  # @param pk The chart ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :format The format in which the data should be returned
  # @option opts [String] :type The type in which the data should be returned
  # @return [ChartDataResponseSchema]
  describe 'api_v1_chart_pk_data_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_delete
  # Deletes a Chart.
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_chart_pk_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_get
  # Get a chart detail information.
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @option opts [GetItemSchema] :q 
  # @return [InlineResponse2009]
  describe 'api_v1_chart_pk_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_put
  # Changes a Chart.
  # @param body Chart schema
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20010]
  describe 'api_v1_chart_pk_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_screenshot_digest_get
  # Get a computed screenshot from cache.
  # @param pk 
  # @param digest 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'api_v1_chart_pk_screenshot_digest_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_pk_thumbnail_digest_get
  # Compute or get already computed chart thumbnail from cache.
  # @param pk 
  # @param digest 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'api_v1_chart_pk_thumbnail_digest_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_post
  # Create a new Chart.
  # @param body Chart schema
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2012]
  describe 'api_v1_chart_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_chart_related_column_name_get
  # Get a list of all possible owners for a chart. Use &#x60;owners&#x60; has the &#x60;column_name&#x60; parameter
  # @param column_name 
  # @param [Hash] opts the optional parameters
  # @option opts [GetRelatedSchema] :q 
  # @return [RelatedResponseSchema]
  describe 'api_v1_chart_related_column_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
