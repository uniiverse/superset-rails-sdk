=begin
#Superset

#Superset

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DashboardsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DashboardsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DashboardsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DashboardsApi' do
    it 'should create an instance of DashboardsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DashboardsApi)
    end
  end

  # unit tests for api_v1_dashboard_delete
  # Deletes multiple Dashboards in a bulk operation.
  # @param [Hash] opts the optional parameters
  # @option opts [GetDeleteIdsSchema] :q 
  # @return [InlineResponse400]
  describe 'api_v1_dashboard_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_export_get
  # Exports multiple Dashboards and downloads them as YAML files.
  # @param [Hash] opts the optional parameters
  # @option opts [GetExportIdsSchema] :q 
  # @return [String]
  describe 'api_v1_dashboard_export_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_favorite_status_get
  # Check favorited dashboards for current user
  # @param [Hash] opts the optional parameters
  # @option opts [GetFavStarIdsSchema] :q 
  # @return [GetFavStarIdsSchema]
  describe 'api_v1_dashboard_favorite_status_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_get
  # Get a list of dashboards, use Rison or JSON query parameters for filtering, sorting, pagination and  for selecting specific columns and metadata.
  # @param [Hash] opts the optional parameters
  # @option opts [GetListSchema] :q 
  # @return [InlineResponse20014]
  describe 'api_v1_dashboard_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_charts_get
  # Get the chart definitions for a given dashboard
  # @param id_or_slug 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20019]
  describe 'api_v1_dashboard_id_or_slug_charts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_datasets_get
  # Returns a list of a dashboard&#x27;s datasets. Each dataset includes only the information necessary to render the dashboard&#x27;s charts.
  # @param id_or_slug Either the id of the dashboard, or its slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20020]
  describe 'api_v1_dashboard_id_or_slug_datasets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_embedded_delete
  # Removes a dashboard&#x27;s embedded configuration.
  # @param id_or_slug The dashboard id or slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_dashboard_id_or_slug_embedded_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_embedded_get
  # Returns the dashboard&#x27;s embedded configuration
  # @param id_or_slug The dashboard id or slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20021]
  describe 'api_v1_dashboard_id_or_slug_embedded_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_embedded_post
  # Sets a dashboard&#x27;s embedded configuration.
  # @param body The embedded configuration to set
  # @param id_or_slug The dashboard id or slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20021]
  describe 'api_v1_dashboard_id_or_slug_embedded_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_embedded_put
  # Sets a dashboard&#x27;s embedded configuration.
  # @param body The embedded configuration to set
  # @param id_or_slug The dashboard id or slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20021]
  describe 'api_v1_dashboard_id_or_slug_embedded_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_id_or_slug_get
  # Get a dashboard detail information.
  # @param id_or_slug Either the id of the dashboard, or its slug
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20018]
  describe 'api_v1_dashboard_id_or_slug_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_import_post
  # @param form_data 
  # @param overwrite 
  # @param passwords 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_dashboard_import_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_info_get
  # Several metadata information about dashboard API endpoints.
  # @param [Hash] opts the optional parameters
  # @option opts [GetInfoSchema] :q 
  # @return [InlineResponse2001]
  describe 'api_v1_dashboard_info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_pk_delete
  # Deletes a Dashboard.
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse400]
  describe 'api_v1_dashboard_pk_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_pk_put
  # Changes a Dashboard.
  # @param body Dashboard schema
  # @param pk 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20022]
  describe 'api_v1_dashboard_pk_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_pk_thumbnail_digest_get
  # Compute async or get already computed dashboard thumbnail from cache.
  # @param pk 
  # @param digest A hex digest that makes this dashboard unique
  # @param [Hash] opts the optional parameters
  # @option opts [ThumbnailQuerySchema] :q 
  # @return [String]
  describe 'api_v1_dashboard_pk_thumbnail_digest_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_post
  # Create a new Dashboard.
  # @param body Dashboard schema
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2014]
  describe 'api_v1_dashboard_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_v1_dashboard_related_column_name_get
  # Get a list of all possible owners for a dashboard.
  # @param column_name 
  # @param [Hash] opts the optional parameters
  # @option opts [GetRelatedSchema] :q 
  # @return [RelatedResponseSchema]
  describe 'api_v1_dashboard_related_column_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
